# Dockerfile for a React application using Nginx
# This Dockerfile builds a React application and serves it using Nginx
FROM node:18 as build

# Set the working directory in the container
# This is where the application code will live
WORKDIR /app

# Copy package.json and package-lock.json (if available) to the working directory
# This allows Docker to cache the npm install step, speeding up builds when dependencies haven't changed
COPY package*.json ./
# Install the application dependencies
# This will install all the dependencies listed in package.json
RUN npm install

# Copy the rest of the application code to the working directory
# This includes the React application code, configuration files, and any other necessary files
COPY . .
# Build the React application
# This compiles the React code into static files that can be served by Nginx
RUN npm run build

# Use Nginx to serve the built React application
# This stage uses the Nginx image to serve the static files generated by the React build
FROM nginx:alpine
# Copy the built React application from the build stage to the Nginx HTML directory
# This makes the static files available to be served by Nginx
COPY --from=build /app/build /usr/share/nginx/html

# Copy the Nginx configuration file to the Nginx configuration directory
# This allows customization of the Nginx server settings, such as routing and caching
EXPOSE 80
# Set the environment variable for the Nginx server
# This is typically set to 'production' in a production environment
CMD ["nginx", "-g", "daemon off;"]
